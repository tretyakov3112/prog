#include <algorithm> 
using std::vector; 
vector<int> majorityKElements(const vector<int>& nums, const int k) {
  vector<int> ans(k); // Создаем вектор, в котором будут храниться k наиболее часто встречающихся элементов
  if (nums.empty()) { // Если входной вектор пустой, то возвращаем вектор ans
    return ans;
  }
  int candidate = nums[0]; // Выбираем первый элемент в качестве кандидата на наиболее часто встречающийся элемент
  int count = 0; // Инициализируем счетчик
  for (const auto& num : nums) { // Проходим по всем элементам входного вектора
    if (num == candidate) { // Если текущий элемент равен кандидату
      ++count; // Увеличиваем счетчик
    } else if (count == 0) { // Если счетчик равен 0
      candidate = num; // Текущий элемент становится кандидатом на наиболее часто встречающийся элемент
      count = 1; // Счетчик устанавливаем в 1
    } else { // Если счетчик не равен 0 и текущий элемент не равен кандидату
      --count; // Уменьшаем счетчик
    }
  }
  count = 0; // Обнуляем счетчик
  for (const auto& num : nums) { // Проходим по всем элементам входного вектора
    if (num == candidate) { // Если текущий элемент равен кандидату
      ++count; // Увеличиваем счетчик
    }
  }
  if (count < k) { // Если количество вхождений кандидата меньше k, то возвращаем вектор ans
    return ans;
  }
  int idx = 0; // Инициализируем индекс
  for (const auto& num : nums) { // Проходим по всем элементам входного вектора
    if (num == candidate && idx < k) { // Если текущий элемент равен кандидату и индекс меньше k
      ans[idx++] = num; // Добавляем текущий элемент в вектор ans и увеличиваем индекс
    }
  }
  return ans; // Возвращаем вектор ans, содержащий k наиболее часто встречающихся элементов
}